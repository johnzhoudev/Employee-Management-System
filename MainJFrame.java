/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.Desktop;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author 565174
 */
public class MainJFrame extends javax.swing.JFrame {
    
    //ATTRIBUTES
    
    //Hash table is a public and static attribute, and can be accessed from any dialog box.
    public static MyHashTable employeeHashTable;
    public static String searchedEmployeeNumberText;
    public static String[] workLocationArray;
    public static DefaultComboBoxModel workLocationModel;
    
    
    //CONSTRUCTOR

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        
        //MAKE HASH TABLE for Employees
        employeeHashTable = new MyHashTable(10);
  
        //Generate Hash Table From Text File
        
        ReadFromTextFile textFileReader = null;
        
        while(true){
            try{
                textFileReader = new ReadFromTextFile();
                textFileReader.buildHashTableFromTextFile(employeeHashTable);
                textFileReader.closeBufferedReader();
                break;
                
                
            }catch(java.io.IOException ex){
                
                

                //Block for making a new file and writing blank employee info to it
                try{
                    File file = new File("src/readMe.txt");
                    //Deleting file not necessary
                    exceptionNewFileHandler(file);

                }catch(java.io.IOException x){
                    x.printStackTrace();
                }
            }
            
            catch(java.lang.NumberFormatException ez){//Only occurs after bufferedReader is instantiated. Thus close bufferedReader necessary to make file deletable
                
                
                //Block for making a new file and writing blank employee info to it
                try{
                    //Closing bufferedReader necessary to allow for deletion of file
                    textFileReader.closeBufferedReader();
                    File file = new File("src/readMe.txt");
                    exceptionNewFileHandler(file);
                    
                    //Launch error window to notify user that the system info has been reset
                    CorruptFileErrorDialog errorDialog = new CorruptFileErrorDialog(this, false);
                    errorDialog.setVisible(true);
                    
                }catch(java.io.IOException x){
                    x.printStackTrace();
                }
                    
                
            }
            
        }
        
        
        //Update hash Table Values
        updateTableValuesFromHashTable(); //Also updates workLocationArray
        
        //Update searched text
        searchedEmployeeNumberText = searchTextField.getText();
        
        
        //Update work Location combo box model
        updateWorkLocationComboBoxModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        viewDetailsButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainEmployeeDisplayTable = new javax.swing.JTable();
        manageWorkLocationsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee Management System", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 102, 102))); // NOI18N
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        searchTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                updateHashTableWithFilteredValuesFromListener();
            }
            public void removeUpdate(DocumentEvent e) {
                updateHashTableWithFilteredValuesFromListener();
            }
            public void insertUpdate(DocumentEvent e) {
                updateHashTableWithFilteredValuesFromListener();
            }
        });

        jLabel1.setText("Search by Employee Number:");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        viewDetailsButton.setText("View Details");
        viewDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        mainEmployeeDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Number", "Last Name", "First Name", "Part or Full Time", "Annual Salary"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(mainEmployeeDisplayTable);
        if (mainEmployeeDisplayTable.getColumnModel().getColumnCount() > 0) {
            mainEmployeeDisplayTable.getColumnModel().getColumn(0).setResizable(false);
            mainEmployeeDisplayTable.getColumnModel().getColumn(1).setResizable(false);
            mainEmployeeDisplayTable.getColumnModel().getColumn(2).setResizable(false);
            mainEmployeeDisplayTable.getColumnModel().getColumn(3).setResizable(false);
            mainEmployeeDisplayTable.getColumnModel().getColumn(4).setResizable(false);
        }

        manageWorkLocationsButton.setText("Manage Work Locations");
        manageWorkLocationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageWorkLocationsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(helpButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addButton)
                                .addGap(18, 18, 18)
                                .addComponent(removeButton)
                                .addGap(18, 18, 18)
                                .addComponent(editButton)
                                .addGap(18, 18, 18)
                                .addComponent(viewDetailsButton)
                                .addGap(141, 141, 141)))
                        .addGap(0, 23, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(manageWorkLocationsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitButton))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(helpButton)
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(addButton)
                    .addComponent(removeButton)
                    .addComponent(editButton)
                    .addComponent(viewDetailsButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(manageWorkLocationsButton)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exceptionNewFileHandler(File file)
        throws IOException{
                
        WriteToTextFile errorFileWriter = new WriteToTextFile();
        errorFileWriter.writeBlankEmployeesAndLocationsToFile();
    }
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        //Write All Current Employees to File
        try{
            WriteToTextFile textFileWriter = new WriteToTextFile();
            textFileWriter.writeEmployeesToFile(employeeHashTable);
        }catch(java.io.IOException ex){
            ex.printStackTrace();
        }
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        
        AddEmployeeDialog addEmployeeDialogBox = new AddEmployeeDialog(this, true);
        addEmployeeDialogBox.setVisible(true);
        
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        
        //Check if a row is selected. If so, remove the employee represented in the row.
        //first row is the 0th row.
        //Named employeeNumberArray because row value will be converted to empnum
        int[] employeeNumberArray = mainEmployeeDisplayTable.getSelectedRows();
        
        
        //If no employees selected, launch dialog box with employee number search
        if(employeeNumberArray.length == 0){
            RemoveEmployeeDialog removeEmployeeDialogBox = new RemoveEmployeeDialog(this, true);
            removeEmployeeDialogBox.setVisible(true);
        }
        
        
        else{//If 1 or more employees are selected to be removed
            
            //For each row value in employeeRow, replace it with the employee number
            for(int row = 0; row < employeeNumberArray.length; row ++){
                employeeNumberArray[row] = (int)mainEmployeeDisplayTable.getValueAt(employeeNumberArray[row], 0);
            }
            //Launch RemoveSelectedEmployeesConfirmWindow dialog box.
            RemoveSelectedEmployeesConfirmDialog confirmRemovalDialog = new RemoveSelectedEmployeesConfirmDialog(this, true, employeeNumberArray);
            confirmRemovalDialog.setVisible(true);
        }
        
    }//GEN-LAST:event_removeButtonActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        //Removes selection from Jtable when clicking on the panel!
        mainEmployeeDisplayTable.clearSelection();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        //Removes selection from Jtable when clicking on the form (just outside the panel)!
        mainEmployeeDisplayTable.clearSelection();
    }//GEN-LAST:event_formMouseClicked

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        //Will only work if 0 or 1 employees are selected. Error window pops up if more than one is selected.
        
        //Check if a row is selected. If so, remove the employee represented in the row.
        //first row is the 0th row.
        int[] employeeNumberArray = mainEmployeeDisplayTable.getSelectedRows();
        
        
        //If no employees selected, launch dialog box with employee number search
        if(employeeNumberArray.length == 0){
            EditEmployeeSearchDialog editEmployeeSearchDialogBox = new EditEmployeeSearchDialog(this, true);
            editEmployeeSearchDialogBox.setVisible(true);
        }
        
        
        else if(employeeNumberArray.length == 1){//If 1 employee is selected to be edited
            
            int employeeNumberToEdit = (int)mainEmployeeDisplayTable.getValueAt(employeeNumberArray[0], 0);
            
            //Instantiate and create edit employee dialog box
            EditEmployeeDialog editEmployeeDialogBox = new EditEmployeeDialog(this, true, employeeNumberToEdit);
            editEmployeeDialogBox.setVisible(true);
        }
        
        else{//More than one employee selected
            //popup error window! Program does nothing following popup.
            EditMultipleEmployeesSelectedErrorDialog errorDialog = new EditMultipleEmployeesSelectedErrorDialog(this, true);
            errorDialog.setVisible(true);

        }
        
        
        
    }//GEN-LAST:event_editButtonActionPerformed

    private void viewDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsButtonActionPerformed
        // TODO add your handling code here:
        //Will only work if 0 or 1 employees are selected. Error window pops up if more than one is selected.
        
        //Check if a row is selected. If so, remove the employee represented in the row.
        //first row is the 0th row.
        int[] employeeNumberArray = mainEmployeeDisplayTable.getSelectedRows();
        
        //If no employees selected, launch dialog box with employee number search
        if(employeeNumberArray.length == 0){
            ViewEmployeeSearchDialog viewDetailsSearchDialogBox = new ViewEmployeeSearchDialog(this, true);
            viewDetailsSearchDialogBox.setVisible(true);
        }
        
        
        else if(employeeNumberArray.length == 1){//If 1 employee is selected to be viewed
            
            int employeeNumberToView= (int)mainEmployeeDisplayTable.getValueAt(employeeNumberArray[0], 0);
            
            //Instantiate and create edit employee dialog box
            ViewDetailsDialog viewDetailsDialogBox = new ViewDetailsDialog(this, true, employeeNumberToView);
            viewDetailsDialogBox.setVisible(true);
        }
        
        else{//More than one employee selected
            //popup error window! Program does nothing following popup.
            ViewMultipleEmployeesSelectedErrorDialog errorDialog = new ViewMultipleEmployeesSelectedErrorDialog(this, true);
            errorDialog.setVisible(true);

        }
        
        
    }//GEN-LAST:event_viewDetailsButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:
        
        try{
            File helpGuide = new File("src/HELP.pdf");
            Desktop.getDesktop().open(helpGuide);
        }catch(java.io.IOException ex){
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_helpButtonActionPerformed

    private void manageWorkLocationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageWorkLocationsButtonActionPerformed
        // TODO add your handling code here:
        ManageWorkLocationsDialog workLocationsDialog = new ManageWorkLocationsDialog(this, true);
        workLocationsDialog.setVisible(true);
        
    }//GEN-LAST:event_manageWorkLocationsButtonActionPerformed
    
    //Method for updating table values with filtered values from value change listener
    private void updateHashTableWithFilteredValuesFromListener(){
        //When searchTextField value is changed, update searchedEmployeeNumberText
        searchedEmployeeNumberText = searchTextField.getText();
        
        updateTableValuesFromHashTable();
    }
    
    //Public and Static so that any dialog box can access this
    public static void updateTableValuesFromHashTable(){
        //Set JTable Data with Manual Input as part of a 2D Array
         Object[][] jTableData = getUpdatedFilteredHashTable().create2DArrayOfAllEmployeeAttributes(getUpdatedFilteredHashTable().sortHashTableByEmpNum());
        
        //Set JTable Headings
        String[] columns = {"Employee Number", "Last Name", "First Name", "Gender", "Work Location", "Part or Full Time", "Annual Salary"};
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(jTableData, columns){
            
            //Makes cells uneditable
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
 
        mainEmployeeDisplayTable.setModel(model);
        
        if (mainEmployeeDisplayTable.getColumnModel().getColumnCount() > 0) {
            mainEmployeeDisplayTable.getColumnModel().getColumn(0).setResizable(false);
            mainEmployeeDisplayTable.getColumnModel().getColumn(1).setResizable(false);
            mainEmployeeDisplayTable.getColumnModel().getColumn(2).setResizable(false);
            mainEmployeeDisplayTable.getColumnModel().getColumn(3).setResizable(false);
            mainEmployeeDisplayTable.getColumnModel().getColumn(4).setResizable(false);
        }
        
        mainEmployeeDisplayTable.getTableHeader().setReorderingAllowed(false);
    }
    
    //Method that returns an updated filtered hash table based on the employee number
    public static MyHashTable getUpdatedFilteredHashTable(){
        
        //Check if searchedEmployeeNumberText is null. If so, nothing has been typed and the originalHashTable is to be returned.
        if(searchedEmployeeNumberText == null){
            return employeeHashTable;
        }
        else{
            MyHashTable filteredHash = employeeHashTable.createFilteredHashTable(searchedEmployeeNumberText);
            return filteredHash;
        }
    }
    
    public static void updateWorkLocationComboBoxModel(){
        workLocationModel = new DefaultComboBoxModel(workLocationArray);
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, FileNotFoundException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
        
        
     
        
        
        

        

    }      


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable mainEmployeeDisplayTable;
    private javax.swing.JButton manageWorkLocationsButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton viewDetailsButton;
    // End of variables declaration//GEN-END:variables
}
